import asyncio
import logging
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from core.models import User, StoryPoint
from db.database import get_session
from core.services import StoryPointService, UserService

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class StoryBot:
    def __init__(self, token: str):
        self.token = token
        self.user_service = UserService()
        self.story_service = StoryPointService()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        if not user:
            return

        self.user_service.get_or_create_user(
            telegram_id=str(user.id),
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )

        keyboard = [
            [InlineKeyboardButton("üìä –î–æ–±–∞–≤–∏—Ç—å Story Points", callback_data="add_points")],
            [InlineKeyboardButton("üìà –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
            [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")],
            [InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø StoryBot - –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å Story Points.\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()

        if query.data == "add_points":
            await query.edit_message_text(
                "–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Story Points –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –†–µ–∞–ª–∏–∑–æ–≤–∞–ª API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            context.user_data['waiting_for_points'] = True

        elif query.data == "my_stats":
            await self.show_user_stats(query, context)

        elif query.data == "leaderboard":
            await self.show_leaderboard(query, context)

        elif query.data == "help":
            await self.show_help(query, context)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if context.user_data.get('waiting_for_points'):
            await self.process_story_points(update, context)
            context.user_data['waiting_for_points'] = False

    async def process_story_points(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        if not user:
            return

        text = update.message.text.strip()
        
        try:
            parts = text.split(' ', 1)
            if len(parts) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –†–µ–∞–ª–∏–∑–æ–≤–∞–ª API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                return

            points = float(parts[0])
            description = parts[1]

            if points <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Story Points –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
                return

            self.story_service.add_story_point(
                telegram_id=str(user.id),
                points=points,
                description=description
            )

            await update.message.reply_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {points} Story Points!\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞! –ò—Å–ø–æ–ª—å–∑—É–π: <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 –†–µ–∞–ª–∏–∑–æ–≤–∞–ª API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )

    async def show_user_stats(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = query.from_user
        stats = self.story_service.get_user_stats(str(user.id))
        
        if not stats:
            await query.edit_message_text("üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π Story Points.")
            return

        total_points = stats.get('total_points', 0)
        total_tasks = stats.get('total_tasks', 0)
        avg_points = stats.get('avg_points', 0)
        
        text = (
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üéØ –í—Å–µ–≥–æ Story Points: {total_points}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ –∑–∞–¥–∞—á—É: {avg_points:.1f}\n"
        )
        
        await query.edit_message_text(text)

    async def show_leaderboard(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        leaderboard = self.story_service.get_leaderboard(limit=10)
        
        if not leaderboard:
            await query.edit_message_text("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
            return

        text = "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):\n\n"
        
        for i, entry in enumerate(leaderboard, 1):
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            name = entry.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            points = entry.get('points', 0)
            text += f"{emoji} {name}: {points} SP\n"
        
        await query.edit_message_text(text)

    async def show_help(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        help_text = (
            "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å Story Points - –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
            "‚Ä¢ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ - –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            "üí° –§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Story Points:\n"
            "<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ 5 –†–µ–∞–ª–∏–∑–æ–≤–∞–ª API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ 3 –ù–∞–ø–∏—Å–∞–ª —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è\n"
            "‚Ä¢ 8 –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        )
        await query.edit_message_text(help_text)

    def run(self) -> None:
        application = Application.builder().token(self.token).build()

        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        logger.info("Starting StoryBot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        raise ValueError("TELEGRAM_TOKEN environment variable is required")
    
    bot = StoryBot(token)
    bot.run()


if __name__ == "__main__":
    main()